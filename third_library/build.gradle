apply plugin: 'com.android.library'
apply plugin: 'com.jakewharton.butterknife'

android {
    compileSdkVersion rootProject.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    def implementations  = rootProject.ext.dependencies

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    api  implementations.libsupport
    api  implementations.libconstraint
    api  implementations.libRxJava
    api  implementations.librouter
    api  implementations.libdagger
    api  implementations.libbutterknife
    api  implementations.liborhanobutlogger
    api implementations.libeasyPermission
    api implementations.libDagger
    api implementations.libRetrofit
    api implementations.libRxAndroid
    api implementations.libOkhttp
    api implementations.libLoggingInterceptor
    api implementations.libConvertergson
    api implementations.libAdapterRxJava
    api implementations.libbindToLifeCycle
    api implementations.libbindToLifeNavi
    api implementations.libRecyclerview
//    api implementations.libLombokJavax
//    api implementations.libLombok


    annotationProcessor  implementations.librouter_compiler
    annotationProcessor  implementations.libDaggerCompiler
    annotationProcessor  implementations.libbutterknifecompiler
    annotationProcessor implementations.libDaggerCompiler

}
