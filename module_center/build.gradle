if(Boolean.valueOf(rootProject.ext.isModule)){
    apply plugin: 'com.android.library'
}else{
    apply plugin: 'com.android.application'
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        if(!Boolean.valueOf(rootProject.ext.isModule)){
            applicationId rootProject.ext.centerApplicationId
        }
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        //Arouter路由配置
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets{
        main{
            if(!Boolean.valueOf(isModule)){
                manifest.srcFile 'src/main/java/debug/AndroidManifest.xml'
            }else{
                manifest.srcFile 'src/main/java/release/AndroidManifest.xml'
                java {
                    //全部Module一起编译的时候剔除debug目录
                    exclude '**/**/debug/**'
                }
            }

        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

dependencies {
    def implementations  = rootProject.ext.dependencies
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    api project(':common_base')

    annotationProcessor implementations.librouter_compiler
    annotationProcessor  implementations.libbutterknifecompiler
    api implementations.librouter
}
